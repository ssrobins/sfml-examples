name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CONAN_REVISIONS_ENABLED: 1
  app_name: SFML-Examples

jobs:
  builds:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            os: ubuntu-18.04
          - name: macos
            os: macos-12
          - name:  windows
            os: windows-2022
    steps:
      - uses: actions/checkout@v3

      - name: Print environment variables
        run: env

      - name: Import Code-Signing Certificates
        if: matrix.name == 'macos'
        uses: ssrobins/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}

      - name: Set Xcode version
        if: matrix.name == 'macos'
        run: sudo xcode-select --switch /Applications/Xcode_13.4.1.app/Contents/Developer

      - name: Install required Linux packages
        if: matrix.name == 'linux'
        run: sudo apt-get install ninja-build python3-setuptools -y

      - name: Install CMake
        uses: ssrobins/install-cmake@main

      - name: Add Python bin to PATH
        if: matrix.name == 'ios' || matrix.name == 'macos'
        run: echo "/Library/Frameworks/Python.framework/Versions/Current/bin" >> $GITHUB_PATH

      - name: Install Conan
        run: |
          pip3 install conan --pre --upgrade
          conan profile detect

      - name: Print versions
        run: |
          cmake --version
          conan --version

      - name: Configure
        run: cmake --preset=${{ matrix.name }} -D CONAN_BUILD_MISSING_PKGS=OFF

      - name: Build
        if: matrix.name != 'ios'
        run: |
          cmake --build --preset=${{ matrix.name }}Debug
          cmake --build --preset=${{ matrix.name }}Release

      - name: Package
        run: |
          cpack --preset=${{ matrix.name }}Debug
          cpack --preset=${{ matrix.name }}Release

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.app_name }}_artifact${{ github.run_number }}
          path: |
            build_${{ matrix.name }}/_package/*.*
            !build_${{ matrix.name }}/_package/*.json
          if-no-files-found: error
